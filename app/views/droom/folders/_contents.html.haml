- limit ||= false
- for_more ||= false
- flat ||= false
- narrow ||= false
- document_count = folder.documents.count

%ul.filing<
  - if limit && limit < document_count
    %li.files{data: {droppable: droom.folder_documents_path(folder), picker: "#upload_to_folder_#{folder.id}"}}
      %ul
        = render :partial => 'droom/documents/listing', :collection => folder.documents.limit(limit)
        - if can?(:edit, folder)
          %li
            %ul.uploads{data: {role: "upload-queue"}}<
        - if for_more
          %li.more
            = link_to t(:more_documents_count, :count => document_count - limit), for_more

  - else
    %li.files{data: {droppable: droom.folder_documents_path(folder), picker: "#upload_to_folder_#{folder.id}"}}
      %ul
        = render :partial => 'droom/documents/listing', :collection => folder.documents, locals: {narrow: narrow}
        - if can?(:edit, folder)
          %li
            %ul.uploads{data: {role: "upload-queue"}}<
        - children = folder.children
        - if flat # floated in event view
          - if children.any? && for_more
            %li.more
              = link_to t(:more_subfolders_count, :count => children.count), for_more

    - unless flat # floated in event view
      - unless admin? || !folder.public?
        - children = folder.children.populated

      %li.folders
        %ul
          - if limit && limit < document_count + folder.children.count
            - children = children.limit(limit - document_count)
            - children = children.populated unless can?(:edit, folder)
            = render :partial => 'droom/folders/folder', :collection => children, :locals => {:defer_contents => true}
            - if for_more
              %li.more
                = link_to t(:more), for_more

          - else
            = render :partial => 'droom/folders/folder', :collection => children, :locals => {:defer_contents => true}

          - if can?(:edit, folder)
            %li
              %ul.uploads{data: {role: "upload-queue"}}<
